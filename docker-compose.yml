version: "3.8"

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  php:
    build:
      context: ./docker/frankenphp
      dockerfile: Dockerfile
    container_name: "${PROJECT_NAME:-docker-example}_php"
    ports:
      - "${FRANKEN_PHP_PORT:-80}:80"
    profiles:
      - php
    volumes:
      - ./src:/app
      - ./docker/frankenphp/php.ini:/usr/local/etc/php/conf.d/custom.ini
      - ./docker/frankenphp/Caddyfile:/etc/caddy/Caddyfile
    networks:
      - app-network
    depends_on:
      - mysql
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mysql:
    image: mysql:8.0
    container_name: "${PROJECT_NAME:-docker-example}_mysql"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: testdb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    profiles:
      - mysql
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - app-network
    logging: *default-logging
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "user",
          "-ppassword",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-docker-example}_phpmyadmin"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: user
      PMA_PASSWORD: password
      UPLOAD_LIMIT: 20G
    volumes:
      - ./docker/phpmyadmin/config.inc.php:/etc/phpmyadmin/config.inc.php
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    profiles:
      - phpmyadmin
    depends_on:
      - mysql
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-docker-example}_mailhog"
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    profiles:
      - mailhog
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: "${PROJECT_NAME:-docker-example}_redis"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    profiles:
      - redis
    volumes:
      - ./data/redis:/data
    networks:
      - app-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  adminer:
    image: adminer
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-docker-example}_adminer"
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    profiles:
      - adminer
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    networks:
      - app-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-docker-example}_redis-commander"
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    profiles:
      - redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - app-network

  mailpit:
    image: axllent/mailpit
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-docker-example}_mailpit"
    ports:
      - "${MAILPIT_SMTP_PORT:-1026}:1025" # SMTP
      - "${MAILPIT_WEB_PORT:-8026}:8025" # WebUI
    profiles:
      - mailpit
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - app-network

  ngrok:
    image: ngrok/ngrok:latest
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-docker-example}_ngrok"
    ports:
      - "${NGROK_WEB_PORT:-4040}:4040" # Ngrok Web UI
    profiles:
      - ngrok
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN:-}
    command: ["http", "php:80"]
    depends_on:
      - php
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: "${PROJECT_NAME:-docker-example}_minio"
    ports:
      - "${MINIO_API_PORT:-9000}:9000" # MinIO API
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # MinIO Console (WebUI)
    profiles:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - app-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

networks:
  app-network:
    driver: bridge
